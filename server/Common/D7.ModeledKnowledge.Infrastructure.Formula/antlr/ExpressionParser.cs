//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace D7.ModeledKnowledge.Infrastructure.Formula
{
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, LPAREN=2, RPAREN=3, MULT=4, DIVIDE=5, DASH=6, PLUS=7, MINUS=8, EQUALS=9, 
		NOT_EQUALS=10, AND=11, OR=12, GT=13, LESS=14, GTE=15, LTE=16, SEMI=17, 
		COMMA=18, ASSIGN=19, INT=20, FLOAT=21, ID=22, STRING=23;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_orexpr = 2, RULE_andexpr = 3, 
		RULE_bexpr = 4, RULE_expression = 5, RULE_term = 6, RULE_unary = 7, RULE_factor = 8, 
		RULE_value = 9, RULE_arguments = 10, RULE_literal = 11;
	public static readonly string[] ruleNames = {
		"program", "statement", "orexpr", "andexpr", "bexpr", "expression", "term", 
		"unary", "factor", "value", "arguments", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'*'", "'/'", "'^'", "'+'", "'-'", "'=='", "'!='", 
		"'&&'", "'||'", "'>'", "'<'", "'>='", "'<='", "';'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LPAREN", "RPAREN", "MULT", "DIVIDE", "DASH", "PLUS", "MINUS", 
		"EQUALS", "NOT_EQUALS", "AND", "OR", "GT", "LESS", "GTE", "LTE", "SEMI", 
		"COMMA", "ASSIGN", "INT", "FLOAT", "ID", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisProgramContext : ProgramContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ParenthesisProgramContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParenthesisProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParenthesisProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisProgram(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ProgramContext {
		public IToken op;
		public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ExpressionParser.ASSIGN, 0); }
		public AssignContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(ID);
				State = 25; ((AssignContext)_localctx).op = Match(ASSIGN);
				State = 26; statement();
				}
				break;
			case 2:
				_localctx = new ParenthesisProgramContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 27; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public OrexprContext orexpr() {
			return GetRuleContext<OrexprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; orexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrexprContext : ParserRuleContext {
		public OrexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orexpr; } }
	 
		public OrexprContext() { }
		public virtual void CopyFrom(OrexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : OrexprContext {
		public IToken op;
		public OrexprContext orexpr() {
			return GetRuleContext<OrexprContext>(0);
		}
		public AndexprContext andexpr() {
			return GetRuleContext<AndexprContext>(0);
		}
		public ITerminalNode OR() { return GetToken(ExpressionParser.OR, 0); }
		public OrContext(OrexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisORExprContext : OrexprContext {
		public AndexprContext andexpr() {
			return GetRuleContext<AndexprContext>(0);
		}
		public ParenthesisORExprContext(OrexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParenthesisORExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParenthesisORExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisORExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrexprContext orexpr() {
		return orexpr(0);
	}

	private OrexprContext orexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OrexprContext _localctx = new OrexprContext(Context, _parentState);
		OrexprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_orexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ParenthesisORExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 33; andexpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OrContext(new OrexprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_orexpr);
					State = 35;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 36; ((OrContext)_localctx).op = Match(OR);
					State = 37; andexpr(0);
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndexprContext : ParserRuleContext {
		public AndexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andexpr; } }
	 
		public AndexprContext() { }
		public virtual void CopyFrom(AndexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndContext : AndexprContext {
		public IToken op;
		public AndexprContext andexpr() {
			return GetRuleContext<AndexprContext>(0);
		}
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public ITerminalNode AND() { return GetToken(ExpressionParser.AND, 0); }
		public AndContext(AndexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisANDExprContext : AndexprContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public ParenthesisANDExprContext(AndexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParenthesisANDExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParenthesisANDExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisANDExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndexprContext andexpr() {
		return andexpr(0);
	}

	private AndexprContext andexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndexprContext _localctx = new AndexprContext(Context, _parentState);
		AndexprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_andexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ParenthesisANDExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 44; bexpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndContext(new AndexprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_andexpr);
					State = 46;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 47; ((AndContext)_localctx).op = Match(AND);
					State = 48; bexpr(0);
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
	 
		public BexprContext() { }
		public virtual void CopyFrom(BexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualContext : BexprContext {
		public IToken op;
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(ExpressionParser.EQUALS, 0); }
		public ITerminalNode NOT_EQUALS() { return GetToken(ExpressionParser.NOT_EQUALS, 0); }
		public ITerminalNode GTE() { return GetToken(ExpressionParser.GTE, 0); }
		public ITerminalNode GT() { return GetToken(ExpressionParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(ExpressionParser.LTE, 0); }
		public ITerminalNode LESS() { return GetToken(ExpressionParser.LESS, 0); }
		public EqualContext(BexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisBExprContext : BexprContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisBExprContext(BexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParenthesisBExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParenthesisBExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisBExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		return bexpr(0);
	}

	private BexprContext bexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BexprContext _localctx = new BexprContext(Context, _parentState);
		BexprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_bexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ParenthesisBExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 55; expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 62;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualContext(new BexprContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
					State = 57;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 58;
					((EqualContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOT_EQUALS) | (1L << GT) | (1L << LESS) | (1L << GTE) | (1L << LTE))) != 0)) ) {
						((EqualContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 59; expression(0);
					}
					} 
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(ExpressionParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public AddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExprContext : ExpressionContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ParenthesisExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParenthesisExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParenthesisExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ParenthesisExprContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 66; term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 73;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 68;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 69;
					((AddContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((AddContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 70; term(0);
					}
					} 
				}
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultContext : TermContext {
		public IToken op;
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(ExpressionParser.MULT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(ExpressionParser.DIVIDE, 0); }
		public MultContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisTermContext : TermContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ParenthesisTermContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParenthesisTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParenthesisTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ParenthesisTermContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 77; unary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultContext(new TermContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 79;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 80;
					((MultContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==MULT || _la==DIVIDE) ) {
						((MultContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 81; unary();
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	 
		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PlusContext : UnaryContext {
		public IToken op;
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(ExpressionParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		public PlusContext(UnaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 14, RULE_unary);
		int _la;
		try {
			_localctx = new PlusContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 87;
				((PlusContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((PlusContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 90; factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 16, RULE_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	 
		public ArgumentsContext() { }
		public virtual void CopyFrom(ArgumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParameterContext : ArgumentsContext {
		public OrexprContext orexpr() {
			return GetRuleContext<OrexprContext>(0);
		}
		public ParameterContext(ArgumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParameterListContext : ArgumentsContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(ExpressionParser.COMMA, 0); }
		public OrexprContext orexpr() {
			return GetRuleContext<OrexprContext>(0);
		}
		public ParameterListContext(ArgumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		return arguments(0);
	}

	private ArgumentsContext arguments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentsContext _localctx = new ArgumentsContext(Context, _parentState);
		ArgumentsContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_arguments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ParameterContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 97; orexpr(0);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterListContext(new ArgumentsContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_arguments);
					State = 100;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 101; Match(COMMA);
					State = 102; orexpr(0);
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatContext : LiteralContext {
		public ITerminalNode FLOAT() { return GetToken(ExpressionParser.FLOAT, 0); }
		public FloatContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : LiteralContext {
		public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public VariableContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodContext : LiteralContext {
		public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		public MethodContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(ExpressionParser.STRING, 0); }
		public StringContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : LiteralContext {
		public ITerminalNode INT() { return GetToken(ExpressionParser.INT, 0); }
		public IntContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : LiteralContext {
		public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		public OrexprContext orexpr() {
			return GetRuleContext<OrexprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		public OrExprContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionListener typedListener = listener as IExpressionListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 22, RULE_literal);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(ID);
				}
				break;
			case 2:
				_localctx = new MethodContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; Match(ID);
				State = 110; Match(LPAREN);
				State = 111; arguments(0);
				State = 112; Match(RPAREN);
				}
				break;
			case 3:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 114; Match(INT);
				}
				break;
			case 4:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 115; Match(FLOAT);
				}
				break;
			case 5:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 116; Match(STRING);
				}
				break;
			case 6:
				_localctx = new OrExprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 117; Match(LPAREN);
				State = 118; orexpr(0);
				State = 119; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return orexpr_sempred((OrexprContext)_localctx, predIndex);
		case 3: return andexpr_sempred((AndexprContext)_localctx, predIndex);
		case 4: return bexpr_sempred((BexprContext)_localctx, predIndex);
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 6: return term_sempred((TermContext)_localctx, predIndex);
		case 10: return arguments_sempred((ArgumentsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool orexpr_sempred(OrexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andexpr_sempred(AndexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bexpr_sempred(BexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool arguments_sempred(ArgumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '~', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1F', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', ')', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', ',', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x34', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x37', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', '?', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x42', '\v', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'J', '\n', '\a', '\f', '\a', '\xE', '\a', 'M', 
		'\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', 'U', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'X', '\v', '\b', '\x3', '\t', '\x5', '\t', '[', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x65', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', 'j', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'm', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '|', '\n', '\r', '\x3', 
		'\r', '\x2', '\b', '\x6', '\b', '\n', '\f', '\xE', '\x16', '\xE', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x2', '\x5', '\x4', '\x2', '\v', '\f', '\xF', '\x12', '\x3', 
		'\x2', '\t', '\n', '\x3', '\x2', '\x6', '\a', '\x2', '\x7F', '\x2', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ' ', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\b', '-', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x38', '\x3', '\x2', '\x2', '\x2', '\f', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'N', '\x3', '\x2', '\x2', '\x2', '\x10', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '^', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x16', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '{', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', 
		'\x18', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x15', '\x2', '\x2', '\x1C', 
		'\x1F', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1F', '\x5', '\x4', '\x3', 
		'\x2', '\x1E', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\x5', '\x6', '\x4', '\x2', '!', '\x5', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\b', '\x4', '\x1', '\x2', '#', '$', '\x5', '\b', '\x5', '\x2', '$', 
		'*', '\x3', '\x2', '\x2', '\x2', '%', '&', '\f', '\x3', '\x2', '\x2', 
		'&', '\'', '\a', '\xE', '\x2', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', 
		'(', '%', '\x3', '\x2', '\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', 
		'*', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', '\a', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\b', '\x5', '\x1', '\x2', '.', '/', '\x5', '\n', '\x6', 
		'\x2', '/', '\x35', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\f', 
		'\x3', '\x2', '\x2', '\x31', '\x32', '\a', '\r', '\x2', '\x2', '\x32', 
		'\x34', '\x5', '\n', '\x6', '\x2', '\x33', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\b', '\x6', '\x1', '\x2', '\x39', ':', '\x5', 
		'\f', '\a', '\x2', ':', '@', '\x3', '\x2', '\x2', '\x2', ';', '<', '\f', 
		'\x3', '\x2', '\x2', '<', '=', '\t', '\x2', '\x2', '\x2', '=', '?', '\x5', 
		'\f', '\a', '\x2', '>', ';', '\x3', '\x2', '\x2', '\x2', '?', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\b', 
		'\a', '\x1', '\x2', '\x44', '\x45', '\x5', '\xE', '\b', '\x2', '\x45', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\f', '\x3', '\x2', '\x2', 
		'G', 'H', '\t', '\x3', '\x2', '\x2', 'H', 'J', '\x5', '\xE', '\b', '\x2', 
		'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\r', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\b', '\b', '\x1', '\x2', 'O', 'P', '\x5', '\x10', 
		'\t', '\x2', 'P', 'V', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\f', '\x3', 
		'\x2', '\x2', 'R', 'S', '\t', '\x4', '\x2', '\x2', 'S', 'U', '\x5', '\x10', 
		'\t', '\x2', 'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', '\xF', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'Y', '[', '\t', '\x3', '\x2', '\x2', 'Z', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x5', '\x12', '\n', '\x2', ']', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\x14', '\v', '\x2', 
		'_', '\x13', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x5', '\x18', '\r', 
		'\x2', '\x61', '\x15', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\b', 
		'\f', '\x1', '\x2', '\x63', '\x65', '\x5', '\x6', '\x4', '\x2', '\x64', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'k', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\f', '\x3', 
		'\x2', '\x2', 'g', 'h', '\a', '\x14', '\x2', '\x2', 'h', 'j', '\x5', '\x6', 
		'\x4', '\x2', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'l', '\x17', '\x3', '\x2', '\x2', '\x2', 'm', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'n', '|', '\a', '\x18', '\x2', '\x2', 'o', 
		'p', '\a', '\x18', '\x2', '\x2', 'p', 'q', '\a', '\x4', '\x2', '\x2', 
		'q', 'r', '\x5', '\x16', '\f', '\x2', 'r', 's', '\a', '\x5', '\x2', '\x2', 
		's', '|', '\x3', '\x2', '\x2', '\x2', 't', '|', '\a', '\x16', '\x2', '\x2', 
		'u', '|', '\a', '\x17', '\x2', '\x2', 'v', '|', '\a', '\x19', '\x2', '\x2', 
		'w', 'x', '\a', '\x4', '\x2', '\x2', 'x', 'y', '\x5', '\x6', '\x4', '\x2', 
		'y', 'z', '\a', '\x5', '\x2', '\x2', 'z', '|', '\x3', '\x2', '\x2', '\x2', 
		'{', 'n', '\x3', '\x2', '\x2', '\x2', '{', 'o', '\x3', '\x2', '\x2', '\x2', 
		'{', 't', '\x3', '\x2', '\x2', '\x2', '{', 'u', '\x3', '\x2', '\x2', '\x2', 
		'{', 'v', '\x3', '\x2', '\x2', '\x2', '{', 'w', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x19', '\x3', '\x2', '\x2', '\x2', '\f', '\x1E', '*', '\x35', '@', 
		'K', 'V', 'Z', '\x64', 'k', '{',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace D7.ModeledKnowledgeINFRA.Expression
