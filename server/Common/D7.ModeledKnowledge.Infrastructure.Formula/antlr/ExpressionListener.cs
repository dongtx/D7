//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expression.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace D7.ModeledKnowledge.Infrastructure.Formula
{
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public interface IExpressionListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="ExpressionParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] ExpressionParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="ExpressionParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] ExpressionParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisProgram</c>
	/// labeled alternative in <see cref="ExpressionParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisProgram([NotNull] ExpressionParser.ParenthesisProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisProgram</c>
	/// labeled alternative in <see cref="ExpressionParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisProgram([NotNull] ExpressionParser.ParenthesisProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ExpressionParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ExpressionParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="ExpressionParser.orexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr([NotNull] ExpressionParser.OrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="ExpressionParser.orexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr([NotNull] ExpressionParser.OrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisORExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.orexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisORExpr([NotNull] ExpressionParser.ParenthesisORExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisORExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.orexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisORExpr([NotNull] ExpressionParser.ParenthesisORExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="ExpressionParser.andexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd([NotNull] ExpressionParser.AndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="ExpressionParser.andexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd([NotNull] ExpressionParser.AndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisANDExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.andexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisANDExpr([NotNull] ExpressionParser.ParenthesisANDExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisANDExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.andexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisANDExpr([NotNull] ExpressionParser.ParenthesisANDExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Equal</c>
	/// labeled alternative in <see cref="ExpressionParser.bexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqual([NotNull] ExpressionParser.EqualContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Equal</c>
	/// labeled alternative in <see cref="ExpressionParser.bexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqual([NotNull] ExpressionParser.EqualContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisBExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.bexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisBExpr([NotNull] ExpressionParser.ParenthesisBExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisBExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.bexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisBExpr([NotNull] ExpressionParser.ParenthesisBExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdd([NotNull] ExpressionParser.AddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdd([NotNull] ExpressionParser.AddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpr([NotNull] ExpressionParser.ParenthesisExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpr([NotNull] ExpressionParser.ParenthesisExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Mult</c>
	/// labeled alternative in <see cref="ExpressionParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMult([NotNull] ExpressionParser.MultContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Mult</c>
	/// labeled alternative in <see cref="ExpressionParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMult([NotNull] ExpressionParser.MultContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesisTerm</c>
	/// labeled alternative in <see cref="ExpressionParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisTerm([NotNull] ExpressionParser.ParenthesisTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesisTerm</c>
	/// labeled alternative in <see cref="ExpressionParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisTerm([NotNull] ExpressionParser.ParenthesisTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Plus</c>
	/// labeled alternative in <see cref="ExpressionParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlus([NotNull] ExpressionParser.PlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Plus</c>
	/// labeled alternative in <see cref="ExpressionParser.unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlus([NotNull] ExpressionParser.PlusContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] ExpressionParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] ExpressionParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] ExpressionParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] ExpressionParser.ValueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Parameter</c>
	/// labeled alternative in <see cref="ExpressionParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] ExpressionParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Parameter</c>
	/// labeled alternative in <see cref="ExpressionParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] ExpressionParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParameterList</c>
	/// labeled alternative in <see cref="ExpressionParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] ExpressionParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParameterList</c>
	/// labeled alternative in <see cref="ExpressionParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] ExpressionParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] ExpressionParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] ExpressionParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Method</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod([NotNull] ExpressionParser.MethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Method</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod([NotNull] ExpressionParser.MethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt([NotNull] ExpressionParser.IntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt([NotNull] ExpressionParser.IntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] ExpressionParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] ExpressionParser.FloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] ExpressionParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] ExpressionParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpr([NotNull] ExpressionParser.OrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpr</c>
	/// labeled alternative in <see cref="ExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpr([NotNull] ExpressionParser.OrExprContext context);
}
} // namespace D7.ModeledKnowledgeINFRA.Expression
